// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum ArticleCategory {
  PROJECT_NEWS
  TUTORIAL
  OPINION
  REVIEW
  HR_HOLIDAYS

}


// Enum pour les statuts des articles
enum ArticleStatus {
  DRAFT
  PUBLISHED
  ARCHIVED
}


// Table des utilisateurs
model User {
  id          String   @id @default(cuid())
  email       String   @unique
  firstName   String
  lastName    String
  jobTitle    String?
  role        UserRole @default(EMPLOYEE)
  password    String
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  admin     Boolean  @default(false)
  accountLockedUntil  DateTime? // pour bloquer l'utilisateur temporairement
  failedLoginAttempts Int       @default(0)
  refreshToken        String?   // pour le token de rafraîchissement
  otp               String?    
  otpExpires        DateTime?  
  lastPasswordResetAt   DateTime?

  // Relations
 
  articles Article[]
  subscriptions         UserTopicSubscription[]
  //readArticles          UserArticleRead[]
  //externalContentViews  ExternalContentView[]

  @@map("users")
}

// Enum pour les rôles utilisateurs
enum UserRole {
  EMPLOYEE
  MANAGER
  ADMIN
}

// Table des sujets d'intérêt
model Topic {
  id          String   @id @default(cuid())
  name        String   @unique
  description String?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations

   subscriptions    UserTopicSubscription[]
   //externalContents ExternalContent[]
   //scrapingSources  ScrapingSource[]

  @@map("topics")
}

// Table de liaison pour les abonnements utilisateurs aux sujets
model UserTopicSubscription {
  id        String   @id @default(cuid())
  userId    String
  topicId   String
  createdAt DateTime @default(now())

  // Relations
  user  User  @relation(fields: [userId], references: [id], onDelete: Cascade)
  topic Topic @relation(fields: [topicId], references: [id], onDelete: Cascade)

  @@unique([userId, topicId])
  @@map("user_topic_subscriptions")
}

// Table des articles internes
model Article {
  id          String          @id @default(cuid())
  title       String
  content     String
  summary     String?
  category    ArticleCategory
  status      ArticleStatus   @default(DRAFT)
  publishedAt DateTime?
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  authorId    String

  // Relations
  author     User              @relation(fields: [authorId], references: [id])
  // readBy     UserArticleRead[]
  // tags       ArticleTag[]

  @@map("articles")
}